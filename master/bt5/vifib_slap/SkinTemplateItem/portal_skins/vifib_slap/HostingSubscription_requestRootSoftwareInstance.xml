<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from DateTime import DateTime\n
\n
portal = context.getPortalObject()\n
cleanup_resource = portal.portal_preferences.getPreferredInstanceCleanupResource()\n
\n
# copy and paste from\n
# portal_workflow/person_slap_interface_workflow/scripts/Person_requestSoftwareInstance\n
if (portal.portal_activities.countMessageWithTag(tag) > 0):\n
  # The software instance is already under creation but can not be fetched from catalog\n
  # As it is not possible to fetch informations, it is better to raise an error\n
  raise NotImplementedError(tag)\n
\n
sale_order_portal_type = "Sale Order"\n
sale_order_line_portal_type = "Sale Order Line"\n
hosting_subscription_portal_type = "Hosting Subscription"\n
if context.isRootSlave():\n
  software_instance_portal_type = "Slave Instance"\n
else:\n
  software_instance_portal_type = "Software Instance"\n
\n
# Mostly copy and paste from\n
# portal_workflow/person_slap_interface_workflow/scripts/Person_requestSoftwareInstance\n
request_software_instance = None\n
for si in context.portal_catalog(portal_type=software_instance_portal_type,\n
                                 title=context.getTitle(), root_uid=context.getUid()):\n
  try:\n
    cleanup_delivery_line = si.Item_getInstancePackingListLine(cleanup_resource)\n
  except ValueError:\n
    request_software_instance = si\n
    break\n
  else:\n
    if cleanup_delivery_line.getSimulationState() != \'delivered\':\n
      request_software_instance = si\n
      break\n
\n
if request_software_instance is None:\n
    setup_service_relative_url = portal.portal_preferences.getPreferredInstanceSetupResource()\n
\n
    request_software_instance = portal.getDefaultModule(portal_type=software_instance_portal_type).newContent(\n
            portal_type=software_instance_portal_type,\n
            source_reference=context.getSourceReference(),\n
            title=context.getTitle(),\n
            text_content=context.getTextContent(),\n
            sla_xml=context.getSlaXml(),\n
            activate_kw={\'tag\': tag},\n
            **portal.Base_getNewSoftwareInstanceCoordinate()\n
    )\n
    request_software_instance.portal_workflow.doActionFor(request_software_instance, \'validate_action\')\n
    context.setPredecessorValueList(\n
      context.getPredecessorValueList() + [request_software_instance]\n
    )\n
\n
    if not person_request:\n
      request_software_instance.requestComputerPartition(\n
        software_release=context.getRootSoftwareReleaseUrl(),\n
        hosting_subscription_uid=context.getUid(),\n
        software_type=context.getSourceReference(),\n
        tag=tag)\n
\n
    if context.getRootState() == \'started\':\n
      request_software_instance.startRequested()\n
    elif context.getRootState() == \'stopped\':\n
      request_software_instance.stopRequested()\n
else:\n
  request_software_instance.edit(\n
    text_content=context.getTextContent(),\n
    source_reference=context.getSourceReference(),\n
    sla_xml=context.getSlaXml(),\n
    activate_kw={\'tag\': tag},\n
  )\n
  if context.getRootState() == \'started\':\n
    request_software_instance.startRequested()\n
    request_software_instance.activate(after_tag=tag).requestStartComputerPartition()\n
  elif context.getRootState() == \'stopped\':\n
    request_software_instance.stopRequested()\n
    request_software_instance.activate(after_tag=tag).requestStopComputerPartition()\n
\n
return request_software_instance\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>tag, person_request=False</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>HostingSubscription_requestRootSoftwareInstance</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
