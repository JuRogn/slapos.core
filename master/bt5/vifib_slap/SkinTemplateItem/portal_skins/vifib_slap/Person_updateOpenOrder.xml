<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from DateTime import DateTime\n
from Products.ERP5Type.DateUtils import getNumberOfDayInMonth\n
\n
person = context\n
portal = person.getPortalObject()\n
tag = \'%s_updateOpenOrder\' % person.getUid()\n
activate_kw = {\'tag\': tag}\n
if portal.portal_activities.countMessageWithTag(tag) > 0:\n
  # nothing to do\n
  return\n
\n
if remove_hosting_list is None:\n
  remove_hosting_list = []\n
if add_kw_list is None:\n
  add_kw_list = []\n
if start_date_tuple_list is None:\n
  start_date_tuple_list = []\n
if stop_date is not None:\n
  stop_date = DateTime(stop_date)\n
previous_open_sale_order = portal.portal_catalog.getResultValue(\n
      default_destination_section_uid=person.getUid(),\n
      portal_type="Open Sale Order",\n
      validation_state="validated")\n
\n
now = DateTime()\n
\n
open_sale_order = None\n
if previous_open_sale_order is None:\n
  open_sale_order = portal.open_sale_order_module.newContent(\n
        source=\'organisation_module/vifib_internet\',\n
        source_section=\'organisation_module/vifib_internet\',\n
        destination_section=person.getRelativeUrl(),\n
        destination_decision=person.getRelativeUrl(),\n
        destination=person.getRelativeUrl(),\n
        price_currency=\'currency_module/EUR\',\n
        specialise=\'sale_trade_condition_module/vifib_trade_condition\',\n
        title="ViFiB Open Order",\n
        activate_kw=activate_kw)\n
\n
hosting_subscription_mapping = {}\n
if previous_open_sale_order is not None:\n
  for open_sale_order_line in previous_open_sale_order.contentValues(portal_type=\'Open Sale Order Line\'):\n
    hosting_subscription_mapping[open_sale_order_line.getAggregate(portal_type=\'Hosting Subscription\')] = open_sale_order_line.getId()\n
\n
just_added_hosting_kw = {}\n
for add_kw in add_kw_list:\n
  add_kw[\'activate_kw\'] = activate_kw\n
  existing = portal.portal_catalog.countResults(portal_type=\'Open Sale Order Line\', default_aggregate_uid=portal.restrictedTraverse(add_kw[\'aggregate\']).getUid())[0][0] > 0\n
  if add_kw[\'aggregate\'] not in hosting_subscription_mapping and not existing:\n
    if open_sale_order is None:\n
      open_sale_order = previous_open_sale_order.Base_createCloneDocument(batch_mode=1)\n
    id = open_sale_order.newContent(**add_kw).getId()\n
    hosting_subscription_mapping[add_kw[\'aggregate\']] = id\n
    just_added_hosting_kw[add_kw[\'aggregate\']] = 1\n
\n
for start_date_tuple in start_date_tuple_list:\n
  if start_date_tuple[0] in hosting_subscription_mapping:\n
    order = previous_open_sale_order or open_sale_order\n
    line = order[hosting_subscription_mapping[start_date_tuple[0]]]\n
    if line.getStartDate() != start_date_tuple[1]:\n
      if open_sale_order is None:\n
        open_sale_order = previous_open_sale_order.Base_createCloneDocument(batch_mode=1)\n
      open_sale_order[hosting_subscription_mapping[start_date_tuple[0]]].setStartDate(start_date_tuple[1])\n
\n
next_month = DateTime() + getNumberOfDayInMonth(DateTime())\n
\n
order = previous_open_sale_order or open_sale_order\n
need_update = False\n
for line in order.contentValues(portal_type=\'Open Sale Order Line\'):\n
  old_stop_date = line.getStopDate()\n
  if old_stop_date is not None:\n
    if stop_date is not None and old_stop_date < stop_date:\n
      need_update = True\n
      break\n
    else:\n
      new_stop_date = old_stop_date + getNumberOfDayInMonth(old_stop_date)\n
      if new_stop_date < next_month:\n
        need_update = True\n
        break\n
\n
if need_update:\n
  if open_sale_order is None:\n
    open_sale_order = previous_open_sale_order.Base_createCloneDocument(batch_mode=1)\n
  for line in open_sale_order.contentValues(portal_type=\'Open Sale Order Line\'):\n
    old_stop_date = line.getStopDate()\n
    if old_stop_date is not None:\n
      if stop_date is not None and old_stop_date < stop_date:\n
        new_stop_date = stop_date\n
      else:\n
        new_stop_date = old_stop_date + getNumberOfDayInMonth(old_stop_date)\n
      if new_stop_date < next_month:\n
        line.setStopDate(new_stop_date, activate_kw=activate_kw)\n
\n
for remove_hosting in remove_hosting_list:\n
  if remove_hosting in just_added_hosting_kw:\n
    # just added, cannot remove yet\n
    continue\n
  remove_id = hosting_subscription_mapping.get(remove_hosting)\n
  if remove_id is not None:\n
    if open_sale_order is not None:\n
      line = open_sale_order[remove_id]\n
    elif previous_open_sale_order is not None:\n
      line = previous_open_sale_order[remove_id]\n
    if line.getStartDate() is not None and line.getStopDate() is not None and line.getStartDate() < line.getStopDate():\n
      if open_sale_order is None:\n
        open_sale_order = previous_open_sale_order.Base_createCloneDocument(batch_mode=1)\n
      open_sale_order.deleteContent(remove_id)\n
      hosting_subscription_mapping.pop(remove_hosting)\n
\n
if previous_open_sale_order is not None and open_sale_order is not None:\n
  previous_open_sale_order.setExpirationDate(now, activate_kw=activate_kw)\n
if open_sale_order is not None:\n
  open_sale_order.setEffectiveDate(now, activate_kw=activate_kw)\n
  open_sale_order.order(activate_kw=activate_kw)\n
  open_sale_order.validate(activate_kw=activate_kw)\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>remove_hosting_list=None, add_kw_list=None, stop_date=None, start_date_tuple_list=None</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Person_updateOpenOrder</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
