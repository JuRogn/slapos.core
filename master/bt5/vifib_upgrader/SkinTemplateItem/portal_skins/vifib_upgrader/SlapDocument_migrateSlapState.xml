<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from Products.ZSQLCatalog.SQLCatalog import Query, ComplexQuery\n
\n
def setUpPeriodicity(hosting_subscription):\n
  from Products.ERP5Type.DateUtils import addToDate, getClosestDate\n
  start_date = hosting_subscription.getCreationDate()\n
  start_date = getClosestDate(target_date=start_date, precision=\'day\')\n
  while start_date.day() >= 29:\n
    start_date = addToDate(start_date, to_add={\'day\': -1})\n
  periodicity_month_day_list = [start_date.day()]\n
  periodicity_hour_list=[0]\n
  periodicity_minute_list=[0]\n
  hosting_subscription.edit(\n
    periodicity_month_day_list=periodicity_month_day_list,\n
    periodicity_hour_list=periodicity_hour_list,\n
    periodicity_minute_list=periodicity_minute_list\n
  )\n
\n
slap_document = context\n
portal = context.getPortalObject()\n
\n
portal_type_list = (\'Hosting Subscription\', \'Software Instance\', \'Slave Instance\')\n
portal_type = slap_document.getPortalType()\n
if portal_type not in portal_type_list:\n
  raise TypeError(\'%s is not %s\' % (slap_document.getPath(), portal_type_list))\n
\n
sale_order_line = slap_document.getAggregateRelatedValue(portal_type=\'Sale Order Line\')\n
\n
\n
if portal_type == \'Hosting Subscription\':\n
  current_periodicity = slap_document.getPeriodicityMonthDayList()\n
  if current_periodicity is None or len(current_periodicity) == 0:\n
    setUpPeriodicity(slap_document)\n
  # Person is now directly associated on the HS\n
  slap_document.edit(\n
    destination_section_value=sale_order_line.getDestinationSectionValue(portal_type="Person"),\n
  )\n
  assert(slap_document.getDestinationSection() == sale_order_line.getDestinationSectionValue().getRelativeUrl())\n
else:\n
  hosting_subscription = sale_order_line.getAggregateValue(portal_type=\'Hosting Subscription\')\n
  slap_document.edit(\n
    specialise_value=hosting_subscription\n
  )\n
  assert(slap_document.getSpecialise() == hosting_subscription.getRelativeUrl())\n
\n
\n
# Migrate slap state\n
if portal_type == \'Hosting Subscription\':\n
  state = slap_document.getRootState()\n
  promise_kw = {\n
    \'instance_xml\': context.getTextContent(),\n
    \'software_type\': context.getSourceReference(),\n
    \'sla_xml\': context.getSlaXml(),\n
    \'software_release\': context.getRootSoftwareReleaseUrl(),\n
    \'shared\': slap_document.isRootSlave()\n
  }\n
else:\n
  explanation_delivery_line = portal.portal_catalog.getResultValue(\n
    portal_type=\'Sale Packing List Line\',\n
    query=ComplexQuery(\n
      Query(default_aggregate_uid=slap_document.getUid()),\n
      Query(default_resource_uid=[\n
        portal.restrictedTraverse(portal.portal_preferences.getPreferredInstanceSetupResource()).getUid(),\n
        portal.restrictedTraverse(portal.portal_preferences.getPreferredInstanceHostingResource()).getUid(),\n
        portal.restrictedTraverse(portal.portal_preferences.getPreferredInstanceCleanupResource()).getUid(),\n
      ]),\n
      operator=\'AND\',\n
    ),\n
    sort_on=((\'movement.start_date\', \'DESC\'),)\n
  )\n
  if explanation_delivery_line is None:\n
    explanation_delivery_line = sale_order_line\n
\n
  if explanation_delivery_line.getPortalType() == \'Sale Packing List Line\':\n
    resource = explanation_delivery_line.getResource()\n
    if resource == portal.portal_preferences.getPreferredInstanceSetupResource():\n
      state = \'stopped\'\n
    elif resource == portal.portal_preferences.getPreferredInstanceCleanupResource():\n
      state = \'destroyed\'\n
    elif resource == portal.portal_preferences.getPreferredInstanceHostingResource():\n
      if explanation_delivery_line.getSimulationState() in (\'confirmed\', \'started\'):\n
        state = \'started\'\n
      else:\n
        state = \'stopped\'\n
      pass\n
    else:\n
      raise TypeError(\'Bad resource %s\' % resource)\n
    pass\n
  else:\n
    if explanation_delivery_line.getSimulationState() == \'cancelled\':\n
      state = \'destoyed\'\n
    else:\n
      raise NotImplementedError\n
  promise_kw = {\n
    \'instance_xml\': context.getTextContent(),\n
    \'software_type\': context.getSourceReference(),\n
    \'sla_xml\': context.getSlaXml(),\n
    \'software_release\': context.getRootSoftwareReleaseUrl(),\n
    \'shared\': slap_document.getPortalType() == \'Slave Instance\'\n
  }\n
\n
  slap_document.setCausalityValue(explanation_delivery_line.getParentValue())\n
  if state != \'destroyed\' or explanation_delivery_line.getSimulationState() != \'delivered\':\n
    slap_document.setAggregateValue(explanation_delivery_line.getAggregateValue(portal_type=\'Computer Partition\'))\n
    assert(slap_document.getAggregate() == explanation_delivery_line.getAggregate(portal_type=\'Computer Partition\'))\n
state_map = {\n
  \'started\': \'start_requested\',\n
  \'stopped\': \'stop_requested\',\n
  \'destroyed\': \'destroy_requested\'\n
}\n
\n
if slap_document.getSlapState() == \'draft\':\n
  if state == "started":\n
    slap_document.requestStart(comment=\'Migration.\', **promise_kw)\n
  elif state == "stopped":\n
    slap_document.requestStop(comment=\'Migration.\', **promise_kw)\n
  elif state == "destroyed":\n
    slap_document.requestStop(comment=\'Migration, in order to reach destroy.\', **promise_kw)\n
    slap_document.requestDestroy(comment=\'Migration.\', **promise_kw)\n
  else:\n
    raise ValueError("Unknown state %s for %s" % (state, slap_document.getRelativeUrl()))\n
if not(slap_document.getSlapState() == state_map[state]):\n
  raise ValueError(\'%s: %s != %s\' % (state, slap_document.getSlapState(), state_map[state]))\n
\n
# Migrate validation state\n
if portal_type == \'Hosting Subscription\':\n
  if state == \'destroyed\':\n
    slap_document.validate()\n
    slap_document.archive()\n
    assert(slap_document.getValidationState() == \'archived\')\n
  else:\n
    assert(slap_document.getValidationState() == \'validated\')\n
else:\n
  if state == \'destroyed\' and \\\n
      (explanation_delivery_line.getPortalType() == \'Sale Order Line\' or \\\n
      explanation_delivery_line.getSimulationState() == \'delivered\'):\n
    slap_document.invalidate()\n
  else:\n
    assert(slap_document.getValidationState() == \'validated\')\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>SlapDocument_migrateSlapState</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
